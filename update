#!/usr/bin/env bash

# Resee
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

faketty() {
    script -qfc "$(printf "%q " "$@")" /dev/null
}

exit_script() {
    echo -e "\r     "
    echo -e "\r${Red}Failed to rebuild system!${Color_Off}"
    echo
    echo -e "Errors:"
    echo -e "\t${Red}Terminated by user."
    trap - SIGINT SIGTERM # clear the trap
    exit
}

invalid_arguments() {
    echo -e "\r     "
    echo -e "\r${Red}Failed to update flake!"
    echo
    echo -e "Errors:"
    echo -e "\t${Red}Invalid arguments. Use either 'switch' or 'boot' as the first argument"
    trap - SIGINT SIGTERM # clear the trap
    exit
}

# Clears the entire current line regardless of terminal size.
# See the magic by running:
# { sleep 1; clear_this_line ; }&
clear_this_line(){
        printf '\r'
        cols="$(tput cols)"
        for i in $(seq "$cols"); do
                printf ' '
        done
        printf '\r'
}

# Erases the amount of lines specified.
# Usage: erase_lines [AMOUNT]
# See the magic by running:
# { sleep 1; erase_lines 2; }&
erase_lines(){
        # Default line count to 1.
        test -z "$1" && lines="1" || lines="$1"

        # This is what we use to move the cursor to previous lines.
        UP='\033[1A'

        # Exit if erase count is zero.
        [ "$lines" = 0 ] && return

        # Erase.
        if [ "$lines" = 1 ]; then
                clear_this_line
        else
                lines=$((lines-1))
                clear_this_line
                for i in $(seq "$lines"); do
                        printf "$UP"
                        clear_this_line
                done
        fi
}

if [[ "$1" != "switch" ]] && [[ "$1" != "boot" ]]; then
    invalid_arguments
fi

trap exit_script SIGINT SIGTERM

DOTFILES_LOCATION=~/code/projects/current/dotfiles
OLD_LOCATION=$(pwd)

cd $DOTFILES_LOCATION

echo
echo -e "[1/2] ${Blue}updating flake...${Color_Off}"
updated=$(nix flake update 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | grep "Updated input")

if [ -z "$updated" ]; then
    echo
    echo -e "${Green}Already up to date!"
else
    echo
    echo -e "Updated Inputs:"
    echo -e "$updated" | while read line; do
        echo -e "\t${Green}$(echo -e "$line" | sed -e "s/â€¢ Updated input '\(.*\)':/\1/g")${Color_Off}"
    done
fi
echo

git add . 2>&1 >/dev/null
git commit -m "Update" 2>&1 >/dev/null

echo
echo -e "[2/2] ${Blue}rebuilding system...${Color_Off}"
echo
exec 5>&1
if result=$(faketty sudo nixos-rebuild switch --flake .#$(hostname) --option eval-cache false 2>&1 | tee /dev/fd/5); then
    erase_lines $(echo "$result" | wc -l)
    #git push
    echo -e "${Green}System Rebuilt!${Color_Off}"
else
    erase_lines $(echo "$result" | wc -l)
    echo -e "${Red}Failed to rebuild system!${Color_Off}"
fi

result=$(echo -e "$result" | sed 's/\x1b\[[0-9;]*m//g')

warnings=$(echo -e "$result" | grep "warning")
errors=$(echo -e "$result" | grep -e "error" -e "- In" | grep -Ev "^error:$" | sed -e "s/- In \`\/nix\/store\/.*-source\/\(.*\)'/ - \1/g")
echo
if [ ! -z "$warnings" ]; then
    echo -e "Warnings:"
    echo -e "$warnings" | while read line; do
        echo -e "\t${Yellow}${line}${Color_Off}"
    done
fi
if [ ! -z "$errors" ]; then
    echo -e "Errors:"
    echo -e "$errors" | while read line; do
        echo -e "\t${Red}${line}${Color_Off}"
    done
fi

tmpfile=$(mktemp -t rebuild_XXXXXX)

echo
echo "For full log, run 'cat $(realpath "$tmpfile")'"

echo -e "$result" > $tmpfile

cd $OLD_LOCATION
